// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native","linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    userType      UserType @relation(fields: [userTypeId], references: [id], onDelete: Cascade)
    userTypeId    Int

    accounts      Account[]
    sessions      Session[]
    facts         Fact[]
}

model UserType {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    users     User[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Tag {
    id        String   @id @default(cuid())
    name      String   @unique
    hexColor  String

    FactTags  FactTags[]
}

model Fact {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title     String
    shortDesc String?
    content   String

    from      DateTime?
    until     DateTime?


    bannerImg String?
    verified  Boolean  @default(false)

    author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId  String

    FactTags  FactTags[]
}

model FactTags {
    factId String
    tagId  String

    @@id([factId, tagId])
    fact   Fact @relation(fields: [factId], references: [id], onDelete: Cascade)
    tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
}
