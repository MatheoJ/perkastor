##### DEVELOPMENT

FROM --platform=linux/amd64 node:16-alpine3.17 AS development
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat openssl1.1-compat
# Add bash to explore the container's filesystem
RUN apk add --no-cache bash
ENV NODE_ENV development
RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app
# Allow to cache node_modules by copying package.json and yarn.lock first
COPY package.json /usr/src/app/
COPY yarn.lock /usr/src/app/
RUN yarn install
COPY ./ /usr/src/app
EXPOSE 3000
CMD [ "yarn", "run", "start:dev" ]

##### DEPENDENCIES

FROM --platform=linux/amd64 node:16-alpine3.17 AS deps
RUN apk add --no-cache libc6-compat openssl1.1-compat
WORKDIR /app

# Install Prisma Client - remove if not using Prisma

COPY prisma ./

# Install dependencies based on the preferred package manager

COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml\* ./

RUN \
 if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
 elif [ -f package-lock.json ]; then npm ci; \
 elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i; \
 else echo "Lockfile not found." && exit 1; \
 fi

##### BUILDER

FROM --platform=linux/amd64 node:16-alpine3.17 AS builder
ARG DATABASE_URL
ARG NEXT_PUBLIC_CLIENTVAR
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .
COPY .env.prod .env

# ENV NEXT_TELEMETRY_DISABLED 1

RUN \
 if [ -f yarn.lock ]; then SKIP_ENV_VALIDATION=1 yarn build; \
 elif [ -f package-lock.json ]; then SKIP_ENV_VALIDATION=1 npm run build; \
 elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && SKIP_ENV_VALIDATION=1 pnpm run build; \
 else echo "Lockfile not found." && exit 1; \
 fi

FROM nginx:1.24.0-alpine AS runner
ENV NODE_ENV production
# Add bash to explore the container's filesystem
RUN apk add --no-cache bash
COPY --from=builder /app/next.config.mjs /usr/share/nginx/html
COPY --from=builder /app/src/env.mjs /usr/share/nginx/html/src/env.mjs
COPY --from=builder /app/public /usr/share/nginx/html/public
COPY --from=builder /app/package.json /usr/share/nginx/html/package.json

# Delete default nginx conf
RUN rm /etc/nginx/conf.d/default.conf
# Add our nginx conf
COPY nginx.conf /etc/nginx/conf.d/default.con
COPY nginx.conf /etc/nginx/conf.d
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]